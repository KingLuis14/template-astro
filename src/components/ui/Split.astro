---
import type { HTMLAttributes } from "astro/types";
import {
  wrapper,
  type Props as WrapperProps,
} from "@/components/ui/Wrapper.astro";
import { cva, type VariantProps } from "class-variance-authority";

const split = cva("wrapper split", {
  variants: {
    size: {
      about: "slipt--about",
      cta: "slipt--cta",
      form: "slipt--form",
    },
  },
});

interface Props
  extends VariantProps<typeof split>,
    Omit<WrapperProps, "size">,
    HTMLAttributes<"div"> {
  variantWrapper?: WrapperProps["size"];
  classes?: string;
}

const { size, classes, variantWrapper = "large", ...attrs } = Astro.props;
---

<div
  class={`${wrapper({ size: variantWrapper })} ${split({ size, class: classes })}`}
  {...attrs}
>
  <slot />
</div>

<style lang="scss">
  .slipt {
    &--cta {
      display: grid;
      grid-template-columns: 1fr;
      grid-template-areas: "contenido" "imagen";
      gap: 4rem;

      > *:first-child {
        grid-area: contenido;
        --_space: 2em;
      }

      > *:last-child {
        grid-area: imagen;
        width: 70%;
        justify-self: center;
      }

      @media screen and (width >= 768px) {
        grid-template-columns: 5fr 3fr;
        grid-template-areas: "contenido imagen";

        > *:last-child {
          width: 100%;
          justify-self: auto;
          display: block;
        }
      }
    }

    &--about {
      display: grid;
      grid-template-columns: 1fr;
      gap: 2.5rem;

      @media screen and (width >= 768px) {
        grid-template-columns: 6fr 4fr;
      }
    }

    &--form {
      display: grid;
      grid-template-areas: "formulario";
      grid-template-columns: 1fr;
      gap: 3rem;

      > :global(form) {
        grid-area: formulario;
      }

      > :global(img) {
        grid-area: imagen;
        display: none;
      }

      @media screen and (width >= 768px) {
        grid-template-columns: 1fr 1fr;
        grid-template-areas: "imagen formulario";

        > :global(img) {
          display: block;
          width: 70%;
          align-self: end;
          justify-self: end;
        }
      }
    }
  }
</style>
